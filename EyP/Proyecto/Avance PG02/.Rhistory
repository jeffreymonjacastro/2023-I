library(readr)
library(dplyr)
dataframe <- read_csv("../db/Programming_languages.csv")
nrow(dataframe)
ncol(dataframe)
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country, githubLanguage.repos, githubBigQuery.repos)
names(dataframe)
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
table(is.na(dataframe$Nombre))
table(is.na(dataframe$Año))
dataframe$Rank <- dataframe$Rank + 1
table(is.na(dataframe$Rank))
dataframe[dataframe$Año < 1945]
dataframe[dataframe$Año < 1945. ]
dataframe[dataframe$Año < 1945, ]
dataframe[-dataframe$Año < 1945, ]
dataframe[dataframe$Año < 1945, ]
dataframe[dataframe$Año >= 1945, ]
dataframe$Año <- dataframe$Año >= 1945
dataframe$Año <- dataframe$Año >= 1945
dataframe$Año <- dataframe$Año >= 1945
dataframe$Año <- dataframe$Año >= 1945
#dataframe$Año <- dataframe$Año >= 1945
dataframe[dataframe$Año < 1945, ]
#dataframe$Año <- dataframe$Año >= 1945
table(dataframe[dataframe$Año < 1945, ])
#dataframe$Año <- dataframe$Año >= 1945
dataframe[dataframe$Año < 1945, ]
#dataframe$Año <- dataframe$Año >= 1945
dataframe[dataframe$Año >= 1945, ]
#dataframe$Año <- dataframe$Año >= 1945
dataframe[dataframe$Año >= 1945, ]
View(dataframe)
View(dataframe)
library(readr)
library(dplyr)
dataframe <- read_csv("../db/Programming_languages.csv")
nrow(dataframe)
ncol(dataframe)
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country, githubLanguage.repos, githubBigQuery.repos)
names(dataframe)
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
table(is.na(dataframe$Nombre))
#dataframe$Año <- dataframe$Año >= 1945
dataframe[dataframe$Año >= 1945, ]
dataframe[-dataframe$Año >= 1945, ]
dataframe[dataframe$Año < 1945, ]
dataframe$Año[dataframe$Año < 1945]
dataframe$Año[dataframe$Año < 1945] <- NA
dataframe$Año[dataframe$Año < 1945] <- NA
table(is.na(dataframe$Año))
dataframe$Año[dataframe$Año < 1945] <- NA
dataframe[is.na(dataframe$Año)]
dataframe$Año[dataframe$Año < 1945] <- NA
is.na(dataframe$Año)
dataframe$Año[dataframe$Año < 1945] <- NA
table(is.na(dataframe$Año))
dataframe$Año[dataframe$Año < 1945] <- NA
dataframe[is.na(dataframe$Año), ]
dataframe$Año[dataframe$Año < 1945] <- NA
dataframe[!is.na(dataframe$Año), ]
dataframe$Año[dataframe$Año < 1945] <- NA
dataframe <- dataframe[!is.na(dataframe$Año)]
dataframe$Año[dataframe$Año < 1945] <- NA
dataframe <- dataframe[!is.na(dataframe$Año), ]
table(is.na(dataframe$Año))
any(is.na(dataframe$Año))
any(is.na(dataframe$Nombre))
? any
dataframe$Rank <- dataframe$Rank + 1
any(is.na(dataframe$Rank))
library(readr)
library(dplyr)
dataframe <- read_csv("../db/Programming_languages.csv")
nrow(dataframe)
ncol(dataframe)
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country, githubLanguage.repos, githubBigQuery.repos)
names(dataframe)
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
any(is.na(dataframe$Nombre))
dataframe$Año[dataframe$Año < 1945] <- NA
dataframe <- dataframe[!is.na(dataframe$Año), ]
any(is.na(dataframe$Año))
dataframe <- dataframe[dataframe$type == "pl" | dataframe$type == "queryLanguage",]
dataframe <- dataframe[dataframe$Tipo == "pl" | dataframe$Tipo == "queryLanguage",]
any(is.na(dataframe$Tipo))
dataframe$Rank <- dataframe$Rank + 1
any(is.na(dataframe$Rank))
dataframe[dataframe$N_Trabajos < 0,]
dataframe[dataframe$N_Trabajos == 0,]
dataframe <- dataframe[dataframe$N_Trabajos > 0,]
dataframe <- dataframe[dataframe$N_Usuarios > 10,]
dataframe <- read_csv("../db/Programming_languages.csv")
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country, githubLanguage.repos, githubBigQuery.repos)
names(dataframe)
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
any(is.na(dataframe$Nombre))
dataframe$Año[dataframe$Año < 1945] <- NA
#dataframe <- dataframe[!is.na(dataframe$Año), ]
any(is.na(dataframe$Año))
dataframe[dataframe$Tipo != "pl" | dataframe$Tipo != "queryLanguage",]
dataframe[dataframe$Tipo != "pl" & dataframe$Tipo != "queryLanguage",]
dataframe[dataframe$Tipo != "pl" & dataframe$Tipo != "queryLanguage",] <- NA
any(is.na(dataframe$Tipo))
dataframe$Rank <- dataframe$Rank + 1
any(is.na(dataframe$Rank))
dataframe[dataframe$N_Trabajos == 0,] <- NA
dataframe[dataframe$N_Trabajos == 0,]
dataframe <- dataframe[dataframe$Tipo != "pl" & dataframe$Tipo != "queryLanguage",]
library(readr)
library(dplyr)
dataframe <- read_csv("../db/Programming_languages.csv")
nrow(dataframe)
ncol(dataframe)
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country, githubLanguage.repos, githubBigQuery.repos)
names(dataframe)
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
any(is.na(dataframe$Nombre))
dataframe$Año[dataframe$Año < 1945] <- NA
#dataframe <- dataframe[!is.na(dataframe$Año), ]
dataframe <- dataframe[dataframe$Tipo == "pl" | dataframe$Tipo == "queryLanguage",]
dataframe$Rank <- dataframe$Rank + 1
dataframe$N_Trabajos[dataframe$N_Trabajos == 0,]
dataframe$N_Trabajos[dataframe$N_Trabajos == 0]
dataframe$N_Trabajos[dataframe$N_Trabajos == 0] <- NA
dataframe <- dataframe[dataframe$N_Usuarios > 10,]
dataframe[dataframe$Github_repos < 1]
dataframe[dataframe$Github_repos < 1, ]
dataframe[dataframe$Github_repos == 0, ]
dataframe$Github_repos[dataframe$Github_repos == 0] <- NA
dataframe[dataframe$Github_repos == 0,]
dataframe[dataframe$BigQuery_repos == 0,]
dataframe$BigQuery_repos[dataframe$BigQuery_repos == 0] <- NA
complete.cases(dataframe)
table(complete.cases(dataframe))
knitr::opts_chunk$set(echo = TRUE)
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,1d
Preparar PG02:first_3,2023-04-19,12d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first:5, after first_3, 6h
section nothing
")
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,1d
Preparar PG02:first_3,2023-04-19,12d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first_5, after first_3, 6h
section PG02
Diagrama de Gantt:first_1, 2023-04-21, 1d
section nothing
")
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,1d
Preparar PG02:first_3,2023-04-19,12d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first_5, after first_3, 6h
section PG02
Replantear objetivos:first_1, 2023-04-21, 1d
section nothing
")
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,1d
Preparar PG02:first_3,2023-04-19,12d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first_5, after first_3, 6h
section PG02
Replantear objetivos:first_1, 2023-04-19, 1d
section nothing
")
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,1d
Preparar PG02:first_3,2023-04-19,12d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first_5, after first_3, 6h
section PG02
Replantear objetivos:first_6, 2023-04-19, 1d
section nothing
")
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,1d
Preparar PG02:first_3,2023-04-19,12d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first_5, after first_3, 6h
section PG02
Replantear objetivos:first_6, 2023-04-20, 1d
Limpieza de tablas:first_7, after first_6, 5d
section nothing
")
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,1d
Preparar PG02:first_3,2023-04-19,12d
Entrega PG02:first_4,2023-05-02,1d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first_5, after first_3, 6h
section PG02
Replantear objetivos:first_6, 2023-04-20, 1d
Limpieza de tablas:first_7, after first_6, 5d
Corrección de variables:first_8, after first_7, 5d
section nothing
")
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,1d
Preparar PG02:first_3,2023-04-19,12d
Entrega PG02:first_4,2023-05-01,2d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first_5, after first_3, 6h
section PG02
Replantear objetivos:first_6, 2023-04-20, 1d
Limpieza de tablas:first_7, after first_6, 5d
Corrección de variables:first_8, after first_7, 5d
section nothing
")
library(DiagrammeR)
mermaid("
gantt
dateFormat  YYYY-MM-DD
title A Very Nice Gantt Diagram
section Main things
Preparar PG01:first_1,2023-04-15,3d
Entrega PG01:first_2,2023-04-18,2d
Preparar PG02:first_3,2023-04-20,11d
Entrega PG02:first_4,2023-05-01,2d
section PG01
Diagrama de Gantt:first_1, 2023-04-15, 12h
Delimitar tema:first_2, after first_1, 12h
Variables de analisis: first_3, after first_2, 6h
Limpieza de la base de datos: first_4, after first_2, 12h
Analizar la factibilidad: first_5, after first_3, 6h
section PG02
Replantear objetivos:first_6, 2023-04-20, 1d
Limpieza de tablas:first_7, after first_6, 5d
Corrección de variables:first_8, after first_7, 5d
section nothing
")
library(readr)
library(dplyr)
dataframe <- read_csv("../db/Programming_languages.csv")
nrow(dataframe)
ncol(dataframe)
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country, githubLanguage.repos, githubBigQuery.repos)
names(dataframe)
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
any(is.na(dataframe$Nombre))
dataframe$Año[dataframe$Año < 1945] <- NA
#dataframe <- dataframe[!is.na(dataframe$Año), ]
dataframe <- dataframe[dataframe$Tipo == "pl" | dataframe$Tipo == "queryLanguage",]
dataframe$Rank <- dataframe$Rank + 1
dataframe$N_Trabajos[dataframe$N_Trabajos == 0] <- NA
dataframe <- dataframe[dataframe$N_Usuarios > 10,]
dataframe$Github_repos[dataframe$Github_repos == 0] <- NA
dataframe <- dataframe[dataframe$Tipo == "pl" | dataframe$Tipo == "queryLanguage",]
dataframe <- read_csv("../db/Programming_languages.csv")
library(readr)
library(dplyr)
dataframe <- read_csv("../db/Programming_languages.csv")
nrow(dataframe)
ncol(dataframe)
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country, githubLanguage.repos, githubBigQuery.repos)
names(dataframe)
dataframe$Año[dataframe$Año < 1945] <- NA
dataframe$Rank <- dataframe$Rank + 1
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
dataframe$Año[dataframe$Año < 1945] <- NA
#dataframe <- dataframe[!is.na(dataframe$Año), ]
dataframe <- dataframe[dataframe$Tipo == "pl" | dataframe$Tipo == "queryLanguage",]
dataframe$Rank <- dataframe$Rank + 1
library(readr)
library(dplyr)
dataframe <- read_csv("../db/Programming_languages.csv")
nrow(dataframe)
ncol(dataframe)
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country, githubLanguage.repos, githubBigQuery.repos)
names(dataframe)
dataframe %>% rename(Nombre = title,
Año = appeared,
Tipo = type,
Rank = rank,
N_Trabajos = numberOfJobs,
N_Usuarios = numberOfUsers,
País = country,
Github_repos = githubLanguage.repos,
BigQuery_repos = githubBigQuery.repos) -> dataframe
any(is.na(dataframe$Nombre))
dataframe$Año[dataframe$Año < 1945] <- NA
#dataframe <- dataframe[!is.na(dataframe$Año), ]
dataframe <- dataframe[dataframe$Tipo == "pl" | dataframe$Tipo == "queryLanguage",]
dataframe$Rank <- dataframe$Rank + 1
dataframe$N_Trabajos[dataframe$N_Trabajos == 0] <- NA
dataframe <- dataframe[dataframe$N_Usuarios > 10,]
dataframe$Github_repos[dataframe$Github_repos == 0] <- NA
library(readr)
library(dplyr)
#Leer la base de datos
encuesta = read_csv("../db/survey_results_public.csv")
View(encuesta)
#borrar las filas que no queremos
encuesta = select(encuesta, MainBranch, Employment, RemoteWork, CodingActivities, DevType, Country, EdLevel, Currency, ConvertedCompYearly, MentalHealth, Ethnicity, Gender, Age, `OpSysPersonal use`, `OpSysProfessional use`, LanguageHaveWorkedWith)
#casos completos
table(complete.cases(encuesta))
#eliminar nulos
encuesta = na.omit(encuesta)
#minimo unos 3600 dolares anuales
encuesta = encuesta[encuesta$ConvertedCompYearly > 3600,]
encuesta = encuesta[encuesta$Gender == "Man" | encuesta$Gender == "Woman",]
table(encuesta$Gender)

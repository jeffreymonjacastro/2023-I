---
title: "S4Lab4"
format: html
editor: visual
---

## Juas

```{r}
library(readr)
library(dplyr)
```

```{r}
DF <- read_csv("DD20230421.csv")
```

```{r}
info(DF)
```

Recordemos que las columnas 19 y 20 estaban vacías. Vamos a eliminarlas

```{r}
all(is.na(DF[, c(19,20)]))
```

En efecto están vacías, vamos a eliminarlas

```{r}
DF <- DF[,-c(19,20)]
```

Vamos a hacer lo mismo para las filas. Podría ser que tengamos algunas filas vacías.

::: callout-tip
En R, los valores `TRUE` y `FALSE` se interpretan como `1` y `0` respectivamente cuando aparecen en operaciones aritméticas. Esto se conoce como *promoción automática de tipos (typecasting)*
:::

```{r}
sum(rowSums(is.na(DF)) == 18)
```

Hay `r sum(rowSums(is.na(DF)) == 18)` filas vacías.

```{r}
DF <- DF[rowSums(is.na(DF)) < 18,]
```

Nuestro tamaño de muestra ahora es `r nrow(DF)`

```{r}
names(DF)
```

Vamos a cambiar esos nombres

```{r}
DF %>% rename(Per = Período,
              Sec = Sección,
              Estatura = `Estatura (cm)`,
              Peso = `Peso (kg)`,
              Signo = `Signo del zodiaco`,
              Tiempo = `Tiempo de reacción`,
              Videojuegos = `Juega videojuegos`,
              Deporte = `Hace deporte`,
              Color = `Color favorito`,
              Talla = `Talla de zapato`,
              Polo = `Talla de polo`,
              Sistema = `Sistema operativo`,
              Fecha = `Fecha de nacimiento`) -> DF
```

## Libreta de códigos

-   Per

-   Sec

-   Ciclo

-   Edad

-   Estatura

-   Peso

-   Signo

-   Sexo

-   Carrera

-   Tiempo

-   Videojuegos

-   Deporte

-   Color

-   Zapato

-   Polo

-   Sistema

-   Fecha

-   Indicaciones

## Limpieza de cada variable

### Per

Veamos qué hay dentro de la variable

```{r}
table(DF$Per)

```

Claramente hay errores en la representación, pero algunos parecen ser fácil de arreglar

El formato debería ser `YYYY-C` donde `YYYY` corresponde a un año "reciente" y `C` corresponde al ciclo, que puede ser cualquiera de {0,1,2}.

Para ver si podemos rescatar algunos valores vamos a usar la función `grep()` y sus variantes.

```{r}
grep("2019-1", DF$Per)
```

La función `grep` retorna los índices del arreglo donde el patrón ocurre

```{r}
DF[grep("2019-1", DF$Per),]
```

Deberíamos poder salvar sin mayor problema aqyellos datos que usan "." o " " en vez de "-"

```{r}
table(gsub("\\.", "-", DF$Per))
```

```{r}
DF$Per <- gsub("\\.", "-", DF$Per)
```

Vamos a sustituir los " " por "-"

```{r}
table(gsub("\\ ", "-", DF$Per))
```

```{r}
DF$Per <- gsub("\\ ", "-", DF$Per)
```

Vamos a sustituir más de un guión por un solo guión

```{r}
table(gsub("-*-", "-", DF$Per))
```

```{r}
DF$Per <- gsub("-*-", "-", DF$Per)
```

Vamos a reparar la entrada que tiene un "I" en vez de un "1".

```{r}
DF$Per <- gsub("I", "1", DF$Per)
```

La variable está casi limpia. Falta lidiar con cosas que no tenemos idea de cómo arreglar.

```{r}
table(DF$Per)
```

Vamos a ver qué cosas satisfacen el patrón

```{r}
table(DF$Per[grep("[0-9][0-9][0-9][0-9]-[0-2]", DF$Per)])
```

¿Qué cosas no satisfacen el patrón? (podemos ser más estrictos)

```{r}
table(DF$Per[-grep("20[1-2][0-9]-[0-2]", DF$Per)])
```

Vamos a colocar `NA` en esas observaciones (QUÉ FLOJERA ARREGLAR SJJS)

```{r}
DF$Per[-grep("20[1-2][0-9]-[0-2]", DF$Per)] <- NA
```

```{r}
table(DF$Per)
```

Salvo que quedan dos problemas sutiles, que debemos resolver.

El valor `2023-2` está en el futuro. Claramente es un error.

El otro detalle es que el conjunto de datos diversos se usó por primera vez en `2020-1` , eso quiere decir que hay algunos valores inválidos que debemos eliminar.

```{r}
DF$Per[DF$Per == "2023-2"] <- NA
DF$Per[DF$Per == "2013-1"] <- NA
DF$Per[DF$Per == "2018-2"] <- NA
DF$Per[DF$Per == "2019-1"] <- NA
DF$Per[DF$Per == "2019-2"] <- NA
```

Eliminar estos errores es más delicado, ya que requiere información adicional a la que los datos nos dan.

```{r}
table(DF$Per)
```

Como la variable `Per` es categórica ordinal, podría ser sensato mostrar un diagrama de barras.

```{r}
barplot(table(DF$Per))
```

Podemos notar, tanto en la tabla como en el diagrama, que falta el ciclo `2021-0`, o no se usó datos diversos o no se abrió la materia

Vamos a convertir a la variable `Per` a `factor` (categórica ordinal) y vamos a reflejar todos los niveles que realmente han debido aparecer.

```{r}
DF$Per <- factor(DF$Per, levels= c("2020-1","2020-2","2021-0","2021-1","2021-2","2022-0","2022-1","2022-2","2023-0","2023-1"), ordered = TRUE)
```

```{r}
table(DF$Per, useNA = 'ifany')
```

```{r}
barplot(table(DF$Per), las = 3)
```

```{r}
barplot(table(DF$Per), 
        xlab = "Período", 
        ylab = "Cantidad de Personas", 
        main = "Número de personas registradas por período", 
        sub = paste("Total de valores válidos:", 
                    sum(!is.na(DF$Per)), 
                    "de una muestra con", 
                    nrow(DF), "observaciones"),
        col = c("lightgreen", "lightgreen", "red"), 
        cex.names = 0.6,)
leyend("topleft", 
       legend = c("Ciclo regular", "Veranito"), 
       fill = c("lightgreen", "red"),
       bty = "n")
```

### Sec 

### Ciclo

### Edad

### Estatura

### Peso

### Signo

### Sexo

### Carrera

### Tiempo

### Videojuegos

### Deporte

### Color

### Zapato

### Polo

### Sistema

### Fecha

### Indicaciones

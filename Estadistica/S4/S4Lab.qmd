---
title: "S4Lab4"
format: html
editor: visual
---

## Lab S4

```{r}
library(readr)
library(dplyr)
#Hello
```

```{r}
DF <- read_csv("DD20230421.csv")
```

```{r}
info(DF)
```

Recordemos que las columnas 19 y 20 estaban vacías. Vamos a eliminarlas

```{r}
all(is.na(DF[, c(19,20)]))
```

En efecto están vacías, vamos a eliminarlas

```{r}
DF <- DF[,-c(19,20)]
```

Vamos a hacer lo mismo para las filas. Podría ser que tengamos algunas filas vacías.

::: callout-tip
En R, los valores `TRUE` y `FALSE` se interpretan como `1` y `0` respectivamente cuando aparecen en operaciones aritméticas. Esto se conoce como *promoción automática de tipos (typecasting)*
:::

```{r}
sum(rowSums(is.na(DF)) == 18)
```

Hay `r sum(rowSums(is.na(DF)) == 18)` filas vacías.

```{r}
DF <- DF[rowSums(is.na(DF)) < 18,]
```

Nuestro tamaño de muestra ahora es `r nrow(DF)`

```{r}
names(DF)
```

Vamos a cambiar esos nombres

```{r}
DF %>% rename(Per = Período,
              Sec = Sección,
              Estatura = `Estatura (cm)`,
              Peso = `Peso (kg)`,
              Signo = `Signo del zodiaco`,
              Tiempo = `Tiempo de reacción`,
              Videojuegos = `Juega videojuegos`,
              Deporte = `Hace deporte`,
              Color = `Color favorito`,
              Talla = `Talla de zapato`,
              Polo = `Talla de polo`,
              Sistema = `Sistema operativo`,
              Fecha = `Fecha de nacimiento`) -> DF
```

## Libreta de códigos

-   Per

-   Sec

-   Ciclo

-   Edad

-   Estatura

-   Peso

-   Signo

-   Sexo

-   Carrera

-   Tiempo

-   Videojuegos

-   Deporte

-   Color

-   Zapato

-   Polo

-   Sistema

-   Fecha

-   Indicaciones

## Limpieza de cada variable

### Per

Veamos qué hay dentro de la variable

```{r}
table(DF$Per)

```

Claramente hay errores en la representación, pero algunos parecen ser fácil de arreglar

El formato debería ser `YYYY-C` donde `YYYY` corresponde a un año "reciente" y `C` corresponde al ciclo, que puede ser cualquiera de {0,1,2}.

Para ver si podemos rescatar algunos valores vamos a usar la función `grep()` y sus variantes.

```{r}
grep("2019-1", DF$Per)
```

La función `grep` retorna los índices del arreglo donde el patrón ocurre

```{r}
DF[grep("2019-1", DF$Per),]
```

Deberíamos poder salvar sin mayor problema aqyellos datos que usan "." o " " en vez de "-"

```{r}
table(gsub("\\.", "-", DF$Per))
```

```{r}
DF$Per <- gsub("\\.", "-", DF$Per)
```

Vamos a sustituir los " " por "-"

```{r}
table(gsub("\\ ", "-", DF$Per))
```

```{r}
DF$Per <- gsub("\\ ", "-", DF$Per)
```

Vamos a sustituir más de un guión por un solo guión

```{r}
table(gsub("-*-", "-", DF$Per))
```

```{r}
DF$Per <- gsub("-*-", "-", DF$Per)
```

Vamos a reparar la entrada que tiene un "I" en vez de un "1".

```{r}
DF$Per <- gsub("I", "1", DF$Per)
```

La variable está casi limpia. Falta lidiar con cosas que no tenemos idea de cómo arreglar.

```{r}
table(DF$Per)
```

Vamos a ver qué cosas satisfacen el patrón

```{r}
table(DF$Per[grep("[0-9][0-9][0-9][0-9]-[0-2]", DF$Per)])
```

¿Qué cosas no satisfacen el patrón? (podemos ser más estrictos)

```{r}
table(DF$Per[-grep("20[1-2][0-9]-[0-2]", DF$Per)])
```

Vamos a colocar `NA` en esas observaciones (QUÉ FLOJERA ARREGLAR SJJS)

```{r}
DF$Per[-grep("20[1-2][0-9]-[0-2]", DF$Per)] <- NA
```

```{r}
table(DF$Per)
```

Salvo que quedan dos problemas sutiles, que debemos resolver.

El valor `2023-2` está en el futuro. Claramente es un error.

El otro detalle es que el conjunto de datos diversos se usó por primera vez en `2020-1` , eso quiere decir que hay algunos valores inválidos que debemos eliminar.

```{r}
DF$Per[DF$Per == "2023-2"] <- NA
DF$Per[DF$Per == "2013-1"] <- NA
DF$Per[DF$Per == "2018-2"] <- NA
DF$Per[DF$Per == "2019-1"] <- NA
DF$Per[DF$Per == "2019-2"] <- NA
```

Eliminar estos errores es más delicado, ya que requiere información adicional a la que los datos nos dan.

```{r}
table(DF$Per)
```

Como la variable `Per` es categórica ordinal, podría ser sensato mostrar un diagrama de barras.

```{r}
barplot(table(DF$Per))
```

Podemos notar, tanto en la tabla como en el diagrama, que falta el ciclo `2021-0`, o no se usó datos diversos o no se abrió la materia

Vamos a convertir a la variable `Per` a `factor` (categórica ordinal) y vamos a reflejar todos los niveles que realmente han debido aparecer.

```{r}
DF$Per <- factor(DF$Per, levels= c("2020-1","2020-2","2021-0","2021-1","2021-2","2022-0","2022-1","2022-2","2023-0","2023-1"), ordered = TRUE)
```

```{r}
table(DF$Per, useNA = 'ifany')
```

```{r}
barplot(table(DF$Per), las = 3)
```

Esa gráfica está muy lejos de estar perfecta, vamos a mejorarla.

```{r}
barplot(table(DF$Per), 
        xlab = "Período", 
        ylab = "Cantidad de Personas", 
        main = "Número de personas registradas por período", 
        sub = paste("Total de valores válidos:", 
                    sum(!is.na(DF$Per)), 
                    "de una muestra con", 
                    nrow(DF), "observaciones"),
        col = c("lightgreen", "lightgreen", "red"), 
        cex.names = 0.6,)
leyend("topleft", 
       legend = c("Ciclo regular", "Veranito"), 
       fill = c("lightgreen", "red"),
       bty = "n")
```

Podemos observar que en los ciclos 0 el número de personas reportadas es menor, estos ciclos corresponden a los ciclos de verano mientras que los demás corresponden a ciclos regulares y en ellos se puede apreciar el crecimiento de la universidad.

El ciclo 2021-0 no sabemos si se abrió el curso de Estadística en verano o si habiéndose abierto, no se usó datos diversos. Lo que podemos afirmar es que no se registraron entradas con ese periodo.

¿Cuál es la moda del ciclo?

Recordemos que el ciclo es categórica ordinal

```{r}
(table(DF$Per))[table(DF$Per) == max(table(DF$Per))]
```

::: callout-note
**Multimodalidad**

```{r}
X <- c(19,25,19,18,19,25,25,18)
```

```{r}
table(X)
```

```{r}
which.max(table(X))
```

Esto no ve que el 25 también tiene frecuencia 3, ya que considera solamente al primero

```{r}
(table(X))[table(X) == max(table(X))]
```

De aquí podemos concluir que X tiene dos modas (es bimodal) y estas valen 19 y 25
:::

::: callout-note
## Ejercicio

Qué pueden decir sobre una variable numérica `Y` tal que toma 7 valores diferentes en 30 observaciones y tiene modas `42` y `96`.

Responder esto es similar a entender un *retrato hablando* como los que salen en las series policiales.
:::

### Sec

### Ciclo

### Edad

```{r}
table(DF$Ciclo)
```

```{r}
x <- c(16,30)
y <- c(0,1000)

plot(DF$Edad, DF$Tiempo
     , col = "#0000ff"
     , main = "Edad vs. Tiempo de reacción"
     , xlab = "Edad (años)"
     , ylab = "Tiempo de reacción"
     , xlim = x
     , ylim = y)
```

### Estatura

```{r}
boxplot(DF$Estatura, horizontal = TRUE)
```

Veamos las estaturas demasiado altas. Dijimos que consideraríamos como correctas entre 45 cm y 280 cm

```{r}
DF %>% filter(Estatura > 280)
```

Esta estatura claramente es un error, vamos a eliminarla colocando `NA`

```{r}
DF$Estatura[DF$Estatura > 280] <- NA
```

```{r}
boxplot(DF$Estatura, horizontal = TRUE)
```

Vamos a resolver los datos atípicamente pequeños.

```{r}
DF %>% filter(Estatura < 45) %>% count()
```

Decidimos que multiplicaríamos por 100, todos esos datos, ya que probablemente la persona puso su estatura en metros en lugar de centímetros

```{r}
Sel <- !is.na(DF$Estatura) & DF$Estatura < 45 
DF$Estatura[Sel] <- 100*DF$Estatura[Sel]
```

```{r}
boxplot(DF$Estatura, horizontal = TRUE)
```

Veamos las observaciones atípicas

Los atípicos por ser demasiado grandes son:

```{r}
q3 <- quantile(DF$Estatura, 0.75, na.rm = TRUE, type = 3)
q3
```

```{r}
q1 <- quantile(DF$Estatura, 0.25, na.rm = TRUE, type = 3)
q1
```

```{r}
RIC <- q3 - q1
RIC
```

(usando dplyr)

```{r}
DF %>% filter(Estatura > q3 + 1.5*RIC)
```

Los atípicos pequeños

(usando R base)

```{r}
DF[!is.na(DF$Estatura) & DF$Estatura < q1 - 1.5*RIC, ]
```

Vamos a suponer que nuestros datos están limpios y vamos a tratar de describirlos.

En UTEC usaremos los histogramas con el parámetro `prob = TRUE` ya que de esa manera garantizamos que el área del histograma es 1. Esto es importante para poder comparar histogramas entre si y para poder compararlos con densidades una vez que veamos variables aleatorias

```{r}
hist(DF$Estatura
     , main = "Histograma de estaturas"
     , xlab = "Estatura (cm)"
     , ylab = "Frecuencia relativa"
     , prob = TRUE
     )
```

### Peso

### Signo

### Sexo

### Carrera

### Tiempo

### Videojuegos

### Deporte

### Color

### Zapato

### Polo

### Sistema

### Fecha

### Indicaciones

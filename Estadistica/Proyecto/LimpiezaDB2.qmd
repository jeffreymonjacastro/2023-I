---
title: "DB2_limpieza"
format: html
editor: visual
---

## Limpieza de datos

Se procederá a limpiar la base de datos `Programming_languages.csv`.

Primero, se verifica que las librerías estén instaladas:

```{r}
library(readr)
library(dplyr)
```

Luego, se importa la base de datos con la librería `readr`, asignando a una variable llamada `DF`.

```{r, warning=FALSE}
dataframe <- read_csv("Programming_languages.csv")
```

Llamaremos la función `problems()` para detectar si hay algún error en el `dataframe`.

```{r}
problems()
```

Como los errores presentados son de variables que no consideramos en este estudio, procedemos a ignorarlos, ya que no serán relevantes.

Luego, veremos cuántas filas y columnas tiene nuestro `dataframe`:

```{r}
nrow(dataframe)
ncol(dataframe)
```

Como se puede ver, hay muchas columnas (en total 353) que no utilizaremos.

Por ello, procedemos a limpiar nuestro `dataframe` centrándonos en las columnas que nos interesan, las cuales son: `Title`, `Appeared`, `Type`, `Rank`, `numberOfJobs`, `numberOfUsers` y `Country`.

Vamos a eliminar las columnas que no necesitemos:

```{r}
# Columnas a conservar
dataframe <- select(dataframe, title, appeared, type, rank, numberOfJobs, numberOfUsers, country)

```

El resultado de este proceso sería:

```{r}
names(dataframe)
```

Ahora, comprobemos cuántas observaciones completas tenemos:

```{r}
table(complete.cases(dataframe), useNA = "ifany")
```

Tenemos un total de 3276 observaciones completas porque faltan datos en la columna `country`. Procederemos a eliminar esas observaciones:

```{r}
dataframe <- na.omit(dataframe)
```

Ahora, verificamos que tengamos observaciones completas:

```{r}
table(complete.cases(dataframe), useNA = "ifany")
```

Continuando con la limpieza, queremos que la columna `type` corresponda a lenguajes de programación `pl` o `queryLanguage`, Por lo que se eliminan todos los registros que no sean `pl` (programming languages) o `queryLanguage` (Lenguaje de consulta)

```{r}
dataframe <- dataframe[dataframe$type == "pl" | dataframe$type == "queryLanguage",]
```

Como resultado, solo nos quedan registros de:

```{r}
dataframe %>% select(type) %>% group_by(type) %>% summarize(n()) 
```

Aplicamos el filtro: `appeared >= 1945`:

```{r}
dataframe <- dataframe[dataframe$appeared >= 1945,]
```

Ahora, se aplicará la restricción: `numberOfUsers >= 10`:

```{r}
dataframe <- dataframe[dataframe$numberOfUsers > 10,]
```

El tamaño efectivo sería:

```{r}
nrow(dataframe)
```

Nuestra base de datos limpia quedaría:

```{r}
dataframe
```
